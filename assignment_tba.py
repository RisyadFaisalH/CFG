# -*- coding: utf-8 -*-
"""ASSIGNMENT TBA.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mHOAtWTkB7wcodngecOH6NnZ4gRGlVKs

ASSIGNMENT TBA

S -> NN VB NN

NN -> adek | kangmas | jubin | sandal | dokar | melek | pitik |

VB -> gawe | iring | nganggo
"""

import string

#initialization

alphabet_list = list(string.ascii_lowercase)
state_list = ['q0','q1', 'q2', 'q3', 'q4', 'q5', 'q6', 'q7', 'q8', 'q9', 'q10', 'q11', 'q12', 'q13','q14', 'q15', 'q16', 'q17', 'q18', 'q19', 'q20', 'q21', 'q22', 'q23', 'q24', 'q25', 'q26' , 'q27', 'q28' ,'q29'
'q30', 'q31', 'q32', 'q33', 'q34', 'q35', 'q36', 'q37', 'q38', 'q39', 'q40', 'q41', 'q42', 'q43', 'q44', 'q45', 'q46', 'q47', 'q48', 'q49', 'q50','q51', 'q52', 'q53', 'qx']

transition_table = {}

for state in state_list:
    for alphabet in alphabet_list:
        transition_table[ (state, alphabet) ] = 'ERROR'
    transition_table[ (state, '#') ] = 'ERROR'
    transition_table[ (state, ' ') ] = 'ERROR'

#space before input string
transition_table['q0', ' '] = 'q0'

#adek

transition_table['q0', 'a'] = 'q1'
transition_table['q1', 'd'] = 'q2'
transition_table['q2', 'e'] = 'q3'
transition_table['q3', 'k'] = 'q4'
transition_table['q4', ' '] = 'qx'
transition_table['q4', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token adek
transition_table['qx', 'a'] = 'q1'

#kangmas

transition_table['q0', 'k'] = 'q5'
transition_table['q5', 'a'] = 'q6'
transition_table['q6', 'n'] = 'q7'
transition_table['q7', 'g'] = 'q8'
transition_table['q8', 'm'] = 'q9'
transition_table['q9', 'a'] = 'q10'
transition_table['q10', 's'] = 'q11'
transition_table['q11', ' '] = 'qx'
transition_table['q11', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token kangmas
transition_table['qx', 'k'] = 'q5'

#jubin

transition_table['q0', 'j'] = 'q12'
transition_table['q12', 'u'] = 'q13'
transition_table['q13', 'b'] = 'q14'
transition_table['q14', 'i'] = 'q15'
transition_table['q15', 'n'] = 'q16'
transition_table['q16', ' '] = 'qx'
transition_table['q16', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token jubin
transition_table['qx', 'j'] = 'q12'

#sandal

transition_table['q0', 's'] = 'q17'
transition_table['q17', 'a'] = 'q18'
transition_table['q18', 'n'] = 'q19'
transition_table['q19', 'd'] = 'q20'
transition_table['q20', 'a'] = 'q21'
transition_table['q21', 'l'] = 'q22'
transition_table['q22', ' '] = 'qx'
transition_table['q22', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token sandal
transition_table['qx', 's'] = 'q17'

#melek

transition_table['q0', 'm'] = 'q23'
transition_table['q23', 'e'] = 'q24'
transition_table['q24', 'l'] = 'q25'
transition_table['q25', 'e'] = 'q26'
transition_table['q26', 'k'] = 'q27'
transition_table['q27', ' '] = 'qx'
transition_table['q27', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token melek
transition_table['qx', 'm'] = 'q23'

#pitik

transition_table['q0', 'p'] = 'q28'
transition_table['q28', 'i'] = 'q29'
transition_table['q29', 't'] = 'q30'
transition_table['q30', 'i'] = 'q31'
transition_table['q31', 'k'] = 'q32'
transition_table['q32', ' '] = 'qx'
transition_table['q32', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token pitik
transition_table['qx', 'p'] = 'q28'

#dokar

transition_table['q0', 'd'] = 'q33'
transition_table['q33', 'o'] = 'q34'
transition_table['q34', 'k'] = 'q35'
transition_table['q35', 'a'] = 'q36'
transition_table['q36', 'r'] = 'q37'
transition_table['q37', ' '] = 'qx'
transition_table['q37', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token dokar
transition_table['qx', 'd'] = 'q33'

#gawe

transition_table['q0', 'g'] = 'q38'
transition_table['q38', 'a'] = 'q39'
transition_table['q39', 'w'] = 'q40'
transition_table['q40', 'e'] = 'q41'
transition_table['q41', ' '] = 'qx'
transition_table['q41', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token gawe
transition_table['qx', 'g'] = 'q38'

#iring

transition_table['q0', 'i'] = 'q42'
transition_table['q42', 'r'] = 'q43'
transition_table['q43', 'i'] = 'q44'
transition_table['q44', 'n'] = 'q45'
transition_table['q45', 'g'] = 'q46'
transition_table['q46', ' '] = 'qx'
transition_table['q46', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token iring
transition_table['qx', 'i'] = 'q42'

#nganggo

transition_table['q0', 'n'] = 'q47'
transition_table['q47', 'g'] = 'q48'
transition_table['q48', 'a'] = 'q49'
transition_table['q49', 'n'] = 'q50'
transition_table['q50', 'g'] = 'q51'
transition_table['q51', 'g'] = 'q52'
transition_table['q52', 'o'] = 'q53'
transition_table['q53', ' '] = 'qx'
transition_table['q53', '#'] = 'ACCEPT'
transition_table['qx', ' '] = 'qx'
transition_table['qx', '#'] = 'ACCEPT'

#Transition for token nganggo
transition_table['qx', 'n'] = 'q47'

#Logical Analysis

def logicalAnalysis(userInput):
  input_string = userInput.lower() + '#'
  idx_char = 0
  state = 'q0'
  current_token = ''
  while state!= 'ACCEPT':
      current_char = input_string[idx_char]
      current_token += current_char
      state = transition_table[(state, current_char)]
      if state == 'q4' or state == 'q11' or state == 'q16' or state == 'q22' or state == 'q27' or state == 'q32' or state == 'q37' or state == 'q41' or state == 'q46' or state == 'q53':
          print('current token: ', current_token,', valid')
          current_token = ''
      if state =='ERROR':
          print('ERROR')
          break;
      idx_char = idx_char + 1
  #conlclusion
  if state == 'ACCEPT':
      print('all tokens in the following sentence: ', userInput, ', valid')

#Example Logical Analyzer

sentence = 'adek gawe sandal kangmas nganggo jubin pitik dokar melek iring'
input_string = sentence.lower()+'#'
logicalAnalysis(input_string)

"""## **Parse Table**"""

# #Example Parser
# sentence = 'adek gawe sandal kangmas'
# tokens = sentence.lower().split()
# tokens.append('EOS')

#symbol definition
non_terminals = ['S', 'NN', 'VB']
terminals = ['adek', 'kangmas', 'jubin', 'sandal', 'dokar', 'melek', 'pitik', 'gawe', 'iring', 'nganggo']

#parser table definition
parser_table = {}


#S
parser_table[('S', 'adek')] = ['NN','VB', 'NN']
parser_table[('S', 'kangmas')] = ['NN','VB', 'NN']
parser_table[('S', 'jubin')] = ['NN','VB', 'NN']
parser_table[('S', 'sandal')] = ['NN','VB', 'NN']
parser_table[('S', 'dokar')] = ['NN','VB', 'NN']
parser_table[('S', 'melek')] = ['NN','VB', 'NN']
parser_table[('S', 'pitik')] = ['NN','VB', 'NN']
parser_table[('S', 'gawe')] = ['ERROR']
parser_table[('S', 'iring')] = ['ERROR']
parser_table[('S', 'nganggo')] = ['ERROR'] 
parser_table[('S', 'EOS')] = ['ERROR']


#NN
parser_table[('NN', 'adek')] = ['adek']
parser_table[('NN', 'kangmas')] = ['kangmas']
parser_table[('NN', 'jubin')] = ['jubin']
parser_table[('NN', 'sandal')] = ['sandal']
parser_table[('NN', 'dokar')] = ['dokar']
parser_table[('NN', 'melek')] = ['melek']
parser_table[('NN', 'pitik')] = ['pitik']
parser_table[('NN', 'gawe')] = ['ERROR']
parser_table[('NN', 'iring')] = ['ERROR']
parser_table[('NN', 'nganggo')] = ['ERROR']
parser_table[('NN', 'EOS')] = ['ERROR']


#VB
parser_table[('VB', 'adek')] = ['ERROR']
parser_table[('VB', 'kangmas')] = ['ERROR']
parser_table[('VB', 'jubin')] = ['ERROR']
parser_table[('VB', 'sandal')] = ['ERROR']
parser_table[('VB', 'dokar')] = ['ERROR']
parser_table[('VB', 'melek')] = ['ERROR']
parser_table[('VB', 'pitik')] = ['ERROR']
parser_table[('VB', 'gawe')] = ['gawe']
parser_table[('VB', 'iring')] = ['iring']
parser_table[('VB', 'nganggo')] = ['nganggo']
parser_table[('VB', 'EOS')] = ['ERROR']

#stack initialization
stack = []
stack.append('#')
stack.append('S')

#input reading initialization
# idx_token = 0
# symbol = tokens[idx_token]

#Parsing Process

def parsingTable(userInput):
  tokens = userInput.lower().split()
  tokens.append('EOS')
  idx_token = 0
  symbol = tokens[idx_token]   
  while (len(stack) > 0):
      top = stack[len(stack) - 1]
      print('top = ', top)
      print('symbol = ', symbol)
      if top in terminals:
          print('top stack is a terminal symbol')
          if top == symbol:
              stack.pop()
              idx_token = idx_token + 1
              symbol = tokens[idx_token]
              if symbol == 'EOS':
                  print('stack elements: ', stack)
                  stack.pop()
          else:
              print('ERROR')
              break;
      elif top in non_terminals:
          print('top stack is non terminals symbol')
          if parser_table[(top, symbol)][0] != 'ERROR':
              stack.pop()
              symbol_to_be_pushed = parser_table[(top, symbol)]
              for i in range(len(symbol_to_be_pushed)-1, -1, -1):
                  stack.append(symbol_to_be_pushed[i])
          else:
              print('ERROR')
              break;
      else:
          print('ERROR')
          break;
      print('stack elements: ', stack)
      print()
  if symbol == 'EOS' and len(stack) == 0:
    print('input string', userInput, 'accepted, grammatically correct')
  else:
    print('ERROR, input string: ', userInput, 'Rejected!!! Not grammatically correct')

#Custom Input logical analyzer + Parsing

print("[Noun   :Meaning]")
print('adek    :Younger Sibling', 'sandal  :Slipper', 'kangmas :Elder Brother', 'jubin   :Floor', 'pitik   :Duckling', 'dokar   :Horse Wagon', 'melek   :Awake', sep='\n')
print("")
print("[Verb   :Meaning]")
print('gawe    :For/Make', 'iring   :Accompany', 'nganggo :Wear', " ", sep='\n')
print("Input Word/Sentence:\n")
userInput = input()
print("")
logicalAnalysis(userInput)
print("")
parsingTable(userInput)